local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
library(swirl)
install_course_github("swirldev", "R_Programming_E")
swirl()
z
main()
5+7
x<-5+7
x
x-3
y <- x - 3
y
z<- c(1.1, 9, 3.14
)
?c
z
c(z,555)
c(z,555,z)
z*2+1000
z*2+1000
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
main()
if (!require("devtools")) install.packages("devtools")
if (!require("bitops")) install.packages("bitops")
if (!require("RCurl")) install.packages("RCurl")
if (!require("stringi")) install.packages("stringi")
if (!require("httr")) install.packages("httr")
if (!require("swirl")) install.packages("swirl")
#install.packages("devtools", "bitops", "RCurl", "stringi", "httr", "swirl")
library(devtools)
library(bitops)
library(RCurl)
library(httr)
library(swirl)
set_config( config( ssl_verifypeer = 0L ) )
if (file.exists("/opt/R/home/library/swirl/Courses/Programando_en_R")) {
uninstall_course("Programando_en_R")
}
install_course_github('josersosa','Programando_en_R')
select_language(language = "spanish")
swirl()
Guillermo
cls()
swirl()
q()
# Carga e instalación de paquetes
if(!require(expm)) { install.packages("expm", dependencies = TRUE); library(expm) }
if(!require(tm)) { install.packages("tm", dependencies = TRUE); library(tm) }
if(!require(dplyr)) { install.packages("dplyr", dependencies = TRUE); library(dplyr) }
if(!require(tidyr)) { install.packages("tidyr", dependencies = TRUE); library(tidyr) }
if(!require(diagram)) { install.packages("diagram", dependencies = TRUE); library(diagram) }
# Matriz de probablilidades de transición de estados
estados <- c("lluvia","soleado","nublado","granizo")
clima <- matrix(c(.53,.15,.25,0.07,
.14,.72,.14,0,
.4,.25,.35,0,
.56,.1,.29,.05),
nrow=4, byrow=TRUE)
row.names(clima) <- estados
colnames(clima) <- estados
clima
# Sumatoria de probabilidades
rowSums(clima)
# Representación gráfica
plotmat(clima,pos = c(2,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .4,
self.shifty = -.01,
self.shiftx = .13,
main = "")
# Matriz de probabilidades de detransición de estados para el segundo día
clima2 <- clima %^% 2
clima2
# Matriz de probabilidades de detransición de estados para el 3er día
clima3 <- clima %^% 3
clima3
# Vector de probabilidades para dos días despues si hoy fue un día de lluvia
u <- c(1,0,0,0)
vectorP<-(u %*% clima2)
vectorP
# Probalidad de que mañana esté nublado ya que hoy es un día soleado
v <- matrix(c(0,0,1,0),nrow=4, byrow=TRUE)
u <- c(0,1,0,0)
#climav<-clima %*% v
#ucimav<-u %*%climav
#ucimav
vectorP2<-(u %*% clima %*% v)
vectorP2
v
clima
climav<-clima %*% v
climav
ucimav<-u %*%climav
ucimav
# Representación gráfica
plotmat(clima,pos = c(2,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .4,
self.shifty = -.01,
self.shiftx = .13,
main = "")
vectorP
# Representación gráfica
plotmat(clima2,pos = c(2,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .4,
self.shifty = -.01,
self.shiftx = .13,
main = "")
clima2
vectorP2<-(u %*% clima %*% v)
vectorP2
# Representación gráfica
plotmat(clima,pos = c(2,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .4,
self.shifty = -.01,
self.shiftx = .13,
main = "")
knitr::opts_chunk$set(echo = TRUE)
n <- 10000
x <- runif(n)
media<-mean(exp(-x))
theta <- media*(1-0)
plot(x, exp(-x),xlab="x", ylab="e^(-x)", type="p",col="green", xlim=c(0,1));text(0.5,media+0.025, "Media", col="red"); abline(h=theta, col="red")
print(theta)
n <- 10000
x <- runif(n, min=2, max=4 )
media<-mean(exp(-x))
theta <- media*(4-2)
plot(x, exp(-x),xlab="x", ylab="e^(-x)",col="green", xlim=c(2,4), ylim=c(0,theta+.1),type="p"); text(3,media+0.01, "Media", col="red"); abline(h=theta, col="red")
print(theta)
n <- 10000
x <- runif(n, min=2, max=4 )
media<-mean(exp(-x))
theta <- media*(4-2)
plot(x, exp(-x),xlab="x", ylab="e^(-x)",col="green", xlim=c(2,4), ylim=c(0,theta+.1),type="p"); text(3,media, "Media", col="red"); abline(h=theta, col="red")
print(theta)
n <- 10000
x <- runif(n, min=2, max=4 )
media<-mean(exp(-x))
theta <- media*(4-2)
plot(x, exp(-x),xlab="x", ylab="e^(-x)",col="green", xlim=c(2,4), ylim=c(0,theta+.1),type="p"); text(3,media-0.05, "Media", col="red"); abline(h=theta, col="red")
print(theta)
n <- 10000
x <- runif(n, min=2, max=4 )
media<-mean(exp(-x))
theta <- media*(4-2)
plot(x, exp(-x),xlab="x", ylab="e^(-x)",col="green", xlim=c(2,4), ylim=c(0,theta+.1),type="p"); text(3,media+0.05, "Media", col="red"); abline(h=theta, col="red")
print(theta)
n <- 10000
x <- runif(n)
media<-mean(exp(-x))
theta <- media*(1-0)
plot(x, exp(-x),xlab="x", ylab="e^(-x)", type="p",col="green", xlim=c(0,1));text(0.5,media-0.025, "Media", col="red"); abline(h=theta, col="red")
print(theta)
knitr::opts_chunk$set(echo = TRUE)
n <- 10000
x <- runif(n, min=2, max=4 )
media<-mean(exp(-x))
theta <- media*(4-2)
plot(x, exp(-x),xlab="x", ylab="e^(-x)",col="green",
xlim=c(2,4), ylim=c(0,theta+.1),type="p");
text(3,media+0.05, "Media", col="red");
abline(h=theta, col="red")
print(theta)
n <- 10000
x <- runif(n, min=2, max=4 )
media<-mean(exp(-x))
theta <- media*(4-2)
plot(x, exp(-x),xlab="x", ylab="e^(-x)",col="green",
xlim=c(2,4), ylim=c(0,theta+.1),type="p")
text(3,media+0.05, "Media", col="red")
abline(h=theta, col="red")
print(theta)
n <- 10000
x <- runif(n)
media<-mean(exp(-x))
theta <- media*(1-0)
plot(x, exp(-x),xlab="x", ylab="e^(-x)", type="p",col="green", xlim=c(0,1))
text(0.5,media-0.025, "Media", col="red")
abline(h=theta, col="red")
print(theta)
n <- 10000
x <- runif(n)
media<-mean(exp(-x))
theta <- media*(1-0)
print(theta)
setwd("C:/Users/gdurang/OneDrive - Universidad de las Américas/Escritorio/R/Semana 7/Semana7")
# Importando el paquete gMOIP
if (!require("gMOIP")) {install.packages("gMOIP", dependencies = TRUE);library(gMOIP)}
# Importando el paquete gMOIP
if (!require("gMOIP")) {install.packages("gMOIP", dependencies = TRUE);library(gMOIP)}
# Detreminando Matriz, función objetivo y restricciones
A = matrix(c(3,2,3,4,0,1), nrow = 3, byrow = TRUE)
b = c(36, 48, 9)
obj = c(24, 22)
#Graficando la solución
plotPolytope(A, b, obj, type = rep("c", ncol(A)), crit = "max", faces = rep("c",
ncol(A)), plotFaces =T, plotFeasible = T, plotOptimum = T, labels = "coord") +
ggplot2::ggtitle("Feasible region only") + ggplot2::xlab("x") + ggplot2::ylab("y")
install.packages("gMOIP")
# Detreminando Matriz, función objetivo y restricciones
A = matrix(c(3,2,3,4,0,1), nrow = 3, byrow = TRUE)
b = c(36, 48, 9)
obj = c(24, 22)
#Graficando la solución
plotPolytope(A, b, obj, type = rep("c", ncol(A)), crit = "max", faces = rep("c",
ncol(A)), plotFaces =T, plotFeasible = T, plotOptimum = T, labels = "coord") +
ggplot2::ggtitle("Feasible region only") + ggplot2::xlab("x") + ggplot2::ylab("y")
library(gMOIP)
devtools::install_github("relund/gMOIP",build_vignettes= TRUE)
# Importando el paquete gMOIP
if (!require("gMOIP")) {install.packages("gMOIP", dependencies = TRUE);library(gMOIP)}
